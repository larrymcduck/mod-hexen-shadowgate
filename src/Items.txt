Actor seconds : Inventory
{
	Inventory.MaxAmount 60
}

Actor minutes : Inventory
{
	Inventory.MaxAmount 60
}

Actor hours : Inventory
{
	Inventory.MaxAmount 999
}

Actor Fists : FWeapFist
{
	DamageType "Weapon"
	Weapon.SelectionOrder 200
	-BLOODSPLATTER
	States
	{
		Ready:
			FIST D 0 A_JumpIfInventory("HaveGauntlets",1,2)
			FIST D 1 A_WeaponReady
			loop
			FPCH A 1 A_WeaponReady
			loop
		Select:
			FIST D 0 A_JumpIfInventory("HaveGauntlets",1,2)
			FIST D 1 A_Raise
			loop
			FPCH A 1 A_Raise
			loop
		Deselect:
			FIST D 0 A_JumpIfInventory("HaveGauntlets",1,2)
			FIST D 1 A_Lower
			loop
			FPCH A 1 A_Lower
			loop
		Fire:
			FIST D 0 A_JumpIfInventory("HaveGauntlets",1,6)
			FIST A 4
			FIST B 4
			FIST C 4 A_CustomPunch(10,0,0,"HammerPuff",96)
			FIST B 4
			FIST A 4 A_ReFire
			Goto Ready
			FPCH B 5 Offset (5, 40)
			FPCH C 4 Offset (5, 40)
			FPCH D 4 Offset (5, 40) A_FPunchAttack
			FPCH C 4 Offset (5, 40)
			FPCH B 5 Offset (5, 40) A_ReFire
			Goto Ready
	}
}

Actor burningTorch1 : Inventory
{
	Inventory.MaxAmount 21000
}

Actor burningTorch2 : Inventory
{
	Inventory.MaxAmount 21000
}

Actor burningTorch1Flicker : Inventory
{
	Inventory.MaxAmount 1
}

Actor burningTorch2Flicker : Inventory
{
	Inventory.MaxAmount 1
}

Actor Torches : CustomInventory 125
{
	+INVENTORY.KEEPDEPLETED
	Radius 8
	Height 64
	+NOGRAVITY
	+INVENTORY.INVBAR
	Inventory.MaxAmount 999
	Inventory.Icon ARTITRCH
	Inventory.PickupMessage "The Torch is in hand."
	States
	{
		Spawn:
			TRCH ABC 3 Bright
			loop
		Use:
			TNT1 A 1 ACS_ExecuteAlways(996)
			Stop
	}
}

Actor StoneInv : CustomInventory 126
{
	Radius 8
	Height 8
	+INVENTORY.INVBAR
	Inventory.MaxAmount 999
	Inventory.Icon STONEINV
	Inventory.PickupMessage "The Stone is in hand."
	States
	{
		Spawn:
			STON A -1
			loop
		Use:
			TNT1 A 1
			Stop
	}
}

// 128 and 129 are free
Actor Bag1 : CustomInventory 127
{
	Inventory.PickupMessage "The White Gem, Blue Gem, and Red Gem are in hand."
	States
	{
		Spawn:
			BAG1 A -1
			stop
		Pickup:
			TNT1 A 0 A_GiveInventory("WhiteGem",1)
			TNT1 A 0 A_GiveInventory("BlueGem",1)
			TNT1 A 0 A_GiveInventory("RedGem",1)
			stop
	}
}

Actor Bag2 : CustomInventory 128
{
	Inventory.PickupMessage "Three copper coins are in hand."
	States
	{
		Spawn:
			BAG1 A -1
			stop
		Pickup:
			TNT1 A 0 A_GiveInventory("CopperCoin",3)
			stop
	}
}

Actor Bag3 : CustomInventory 129
{
	Inventory.PickupMessage "Three Gold coins and One Big Coin are in hand."
	States
	{
		Spawn:
			BAG1 A -1
			stop
		Pickup:
			TNT1 A 0 A_GiveInventory("GoldCoin",3)
			TNT1 A 0 A_GiveInventory("BigCoin",1)
			stop
	}
}

Actor WhiteGem : CustomInventory
{
	+INVENTORY.KEEPDEPLETED
	+INVENTORY.INVBAR
	Inventory.Icon GEMWITE
	Inventory.PickupMessage "The White Gem is in hand."
	States
	{
		Spawn:
			GEMW A -1 Bright
			stop
		Use:
			TNT1 A 1 ACS_ExecuteAlways(35, 0, 1)
			stop
	}
}

Actor BlueGem : WhiteGem
{
	Inventory.Icon ARTIGEMB
	Inventory.PickupMessage "The Blue Gem is in hand."
	States
	{
		Spawn:
			AGMB A -1 Bright
			stop
		Use:
			TNT1 A 1 ACS_ExecuteAlways(35, 0, 2)
			stop
	}
}

Actor RedGem : WhiteGem
{
	Inventory.Icon ARTIGEMR
	Inventory.PickupMessage "The Red Gem is in hand."
	States
	{
		Spawn:
			AGMR A -1 Bright
			stop
		Use:
			TNT1 A 1 ACS_ExecuteAlways(35, 0, 3)
			stop
	}
}

Actor GemMissile
{
	+FLOORHUGGER
	+RIPPER
	Radius 1
	Height 4
	Speed 50
	Projectile
	States
	{
		Spawn:
			TNT1 AAAAAAAA 1
			stop
		Death:
			TNT1 A 1
			stop
	}
}

Actor Sphere : CustomInventory 130
{
	DamageType "Ice"
	Radius 18
	Height 20
	+INVENTORY.INVBAR
	Inventory.Icon ARSPHERE
	Inventory.PickupMessage "The Sphere is in hand."
	States
	{
		Spawn:
			SBS4 AAAAAABBBBBBCCCCCC 1 Bright ACS_ExecuteAlways(8)
			loop
		Use:
			SBS4 A 1 A_FireCustomMissile("SphereThrown")
			stop
		Death:
			TNT1 A 1
			stop
	}
}

Actor SphereThrown
{
	DamageType "Ice"
	Speed 20
	+NOBLOCKMAP
	+DROPOFF
	+MISSILE
	+NOTELEPORT
	DropItem "Sphere"
	States
	{
		Spawn:
			SBS4 ABC 6 Bright ACS_ExecuteAlways(8)
			loop
		Death:
			SBS4 A 1 Bright A_NoBlocking
			stop
	}
}

Actor DragonFlamesInv : Inventory
{
	Inventory.MaxAmount 5
}

Actor Shield : Weapon 133
{
	DamageType "Weapon"
	Weapon.SelectionOrder 100
	Inventory.PickupMessage "The Shield is in hand."
	States
	{
		Spawn:
			CTDP J -1
			loop
		Ready:
			SHLD A 0 A_JumpIfInventory("DragonFlamesInv",1,4)
			SHLD A 0 A_JumpIfInventory("HaveGauntlets",1,2)
			SHLD A 1 A_WeaponReady
			loop
			SHLD G 1 A_WeaponReady
			loop
			SHLD B 0 A_JumpIfInventory("DragonFlamesInv",2,4)
			SHLD B 0 A_JumpIfInventory("HaveGauntlets",1,2)
			SHLD B 1 A_WeaponReady
			loop
			SHLD H 1 A_WeaponReady
			loop
			SHLD C 0 A_JumpIfInventory("DragonFlamesInv",3,4)
			SHLD C 0 A_JumpIfInventory("HaveGauntlets",1,2)
			SHLD C 1 A_WeaponReady
			loop
			SHLD I 1 A_WeaponReady
			loop
			SHLD D 0 A_JumpIfInventory("DragonFlamesInv",4,4)
			SHLD D 0 A_JumpIfInventory("HaveGauntlets",1,2)
			SHLD D 1 A_WeaponReady
			loop
			SHLD J 1 A_WeaponReady
			loop
			SHLD D 0 A_JumpIfInventory("HaveGauntlets",1,2)
			SHLD E 1 A_WeaponReady
			loop
			SHLD K 1 A_WeaponReady
			loop
		Select:
			SHLD A 0 A_JumpIfInventory("DragonFlamesInv",1,4)
			SHLD A 0 A_JumpIfInventory("HaveGauntlets",1,2)
			SHLD A 1 A_Raise
			loop
			SHLD G 1 A_Raise
			loop
			SHLD B 0 A_JumpIfInventory("DragonFlamesInv",2,4)
			SHLD B 0 A_JumpIfInventory("HaveGauntlets",1,2)
			SHLD B 1 A_Raise
			loop
			SHLD H 1 A_Raise
			loop
			SHLD C 0 A_JumpIfInventory("DragonFlamesInv",3,4)
			SHLD C 0 A_JumpIfInventory("HaveGauntlets",1,2)
			SHLD C 1 A_Raise
			loop
			SHLD I 1 A_Raise
			loop
			SHLD D 0 A_JumpIfInventory("DragonFlamesInv",4,4)
			SHLD D 0 A_JumpIfInventory("HaveGauntlets",1,2)
			SHLD D 1 A_Raise
			loop
			SHLD J 1 A_Raise
			loop
			SHLD D 0 A_JumpIfInventory("HaveGauntlets",1,2)
			SHLD E 1 A_Raise
			loop
			SHLD K 1 A_Raise
			loop
		Deselect:
			SHLD A 0 A_JumpIfInventory("DragonFlamesInv",1,4)
			SHLD A 0 A_JumpIfInventory("HaveGauntlets",1,2)
			SHLD A 1 A_Lower
			loop
			SHLD G 1 A_Lower
			loop
			SHLD B 0 A_JumpIfInventory("DragonFlamesInv",2,4)
			SHLD B 0 A_JumpIfInventory("HaveGauntlets",1,2)
			SHLD B 1 A_Lower
			loop
			SHLD H 1 A_Lower
			loop
			SHLD C 0 A_JumpIfInventory("DragonFlamesInv",3,4)
			SHLD C 0 A_JumpIfInventory("HaveGauntlets",1,2)
			SHLD C 1 A_Lower
			loop
			SHLD I 1 A_Lower
			loop
			SHLD D 0 A_JumpIfInventory("DragonFlamesInv",4,4)
			SHLD D 0 A_JumpIfInventory("HaveGauntlets",1,2)
			SHLD D 1 A_Lower
			loop
			SHLD J 1 A_Lower
			loop
			SHLD D 0 A_JumpIfInventory("HaveGauntlets",1,2)
			SHLD E 1 A_Lower
			loop
			SHLD K 1 A_Lower
			loop
		Fire:
			SHLD A 0 A_JumpIfInventory("DragonFlamesInv",1,4)
			SHLD A 0 A_JumpIfInventory("HaveGauntlets",1,2)
			SHLD A 1 A_WeaponReady
			Goto Ready
			SHLD G 1 A_WeaponReady
			Goto Ready
			SHLD B 0 A_JumpIfInventory("DragonFlamesInv",2,4)
			SHLD B 0 A_JumpIfInventory("HaveGauntlets",1,2)
			SHLD B 1 A_WeaponReady
			Goto Ready
			SHLD H 1 A_WeaponReady
			Goto Ready
			SHLD C 0 A_JumpIfInventory("DragonFlamesInv",3,4)
			SHLD C 0 A_JumpIfInventory("HaveGauntlets",1,2)
			SHLD C 1 A_WeaponReady
			Goto Ready
			SHLD I 1 A_WeaponReady
			Goto Ready
			SHLD D 0 A_JumpIfInventory("DragonFlamesInv",4,4)
			SHLD D 0 A_JumpIfInventory("HaveGauntlets",1,2)
			SHLD D 1 A_WeaponReady
			Goto Ready
			SHLD J 1 A_WeaponReady
			Goto Ready
			SHLD D 0 A_JumpIfInventory("HaveGauntlets",1,2)
			SHLD E 1 A_WeaponReady
			Goto Ready
			SHLD K 1 A_WeaponReady
			Goto Ready
	}
}

Actor SpearAmmo : Ammo
{
	Inventory.Amount 15
	Inventory.MaxAmount 15
	Ammo.BackpackAmount 15
	Ammo.BackpackMaxAmount 15
}

Actor Spear : Weapon 134
{
	DamageType "Weapon"
	Weapon.AmmoUse 1
	Weapon.AmmoGive 2
	Weapon.AmmoType "SpearAmmo"
	Weapon.SelectionOrder 101
	Inventory.PickupMessage "The Spear is in hand."
	States
	{
		Spawn:
			SPER A -1
			loop
		Ready:
			SPER B 0 A_JumpIfInventory("SpearAmmo",1,2)
			TNT1 A 1 A_WeaponReady
			loop
			SPER B 1 A_WeaponReady
			loop
		Select:
			SPER B 1 A_Raise
			loop
		Deselect:
			SPER B 0 A_JumpIfInventory("SpearAmmo",1,2)
			TNT1 A 1 A_Lower
			loop
			SPER B 1 A_Lower
			loop
		Fire:
			SPER C 1 Offset(64,-16)
			SPER C 1 Offset(32,-16)
			SPER C 1 Offset(0,-16)
			SPER C 1 Offset(-32,-16)
			SPER C 1 Offset(-64,-16)
			SPER C 1 Offset(-96,-16)
			SPER C 1 Offset(-128,-16)
			SPER C 1 Offset(-160,-16)
			SPER D 0 Offset(80,0) A_FireCustomMissile("SpearInAir")
			SPER D 1 Offset(80,0)
			SPER D 1 Offset(64,16)
			SPER D 1 Offset(48,24)
			SPER D 1 Offset(32,32)
			SPER D 1 Offset(16,40)
			SPER D 1 Offset(8,48)
			SPER D 1 Offset(0,56)
			SPER D 1 Offset(-8,64)
			SPER D 1 Offset(-16,72)
			SPER E 1 Offset(0,40)
			SPER E 1 Offset(0,48)
			SPER E 1 Offset(0,56)
			SPER E 1 Offset(0,64)
			SPER E 1 Offset(0,72)
			SPER E 0 A_TakeInventory("SpearAmmo",999)
			SPER E 0 A_TakeInventory("Spear",1)
			Goto Ready
	}
}

Actor SpearInAir
{
	DamageType "Weapon"
	Damage 15
	Radius 8
	Height 8
	Speed 20
	Projectile
	DropItem "Spear"
	States
	{
		Spawn:
			SPER AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA 1
			SPER A 1 A_Gravity
			loop
		Death:
			SPER A 1 A_NoBlocking
			stop
	}
}

Actor Skull : Inventory 135
{
	+INVENTORY.KEEPDEPLETED
	+INVENTORY.INVBAR
	Inventory.MaxAmount 99
	Inventory.Icon SKULINV
	Inventory.PickupMessage "The Skull is in hand."
	States
	{
		Spawn:
			SKUL A -1
			loop
	}
}

Actor Hammer : FWeapHammer 136
{
	DamageType "Weapon"
	Weapon.SelectionOrder 102
	Weapon.AmmoUse1 0
	Weapon.AmmoGive1 0
	Weapon.YAdjust -10
	Weapon.AmmoType1 ""
	Inventory.PickupMessage "The Hammer is in hand."
	States
	{
		Spawn:
			HAMM A -1
			loop
		Fire:
			HAMM B 0 A_JumpIfInventory("HaveGauntlets",1,13)
			HAMM B 6 Offset (5, 0)
			HAMM C 3 Offset (5, 0) A_FHammerAttack
			HAMM D 3 Offset (5, 0)
			FHMR E 2 Offset (5, 0)
			FHMR E 10 Offset (5, 150)
			FHMR A 1 Offset (0, 60)
			FHMR A 1 Offset (0, 55)
			FHMR A 1 Offset (0, 50)
			FHMR A 1 Offset (0, 45)
			FHMR A 1 Offset (0, 40)
			FHMR A 1 Offset (0, 35)
			FHMR A 1
			Goto Ready
			FHMR B 6 Offset (5, 0)
			FHMR C 3 Offset (5, 0) A_FHammerAttack
			FHMR D 3 Offset (5, 0)
			FHMR E 2 Offset (5, 0)
			FHMR E 10 Offset (5, 150)
			FHMR A 1 Offset (0, 60)
			FHMR A 1 Offset (0, 55)
			FHMR A 1 Offset (0, 50)
			FHMR A 1 Offset (0, 45)
			FHMR A 1 Offset (0, 40)
			FHMR A 1 Offset (0, 35)
			FHMR A 1
			Goto Ready
	}
}

Actor Helm : Inventory 137
{
	+INVENTORY.INVBAR
	Inventory.MaxAmount 99
	Inventory.Icon HELMINV
	Inventory.PickupMessage "The Helmet is in hand."
	States
	{
		Spawn:
			HELM A -1
			loop
	}
}

Actor Bone : Inventory 139
{
	+INVENTORY.INVBAR
	Inventory.MaxAmount 99
	Inventory.Icon BONEINV
	Inventory.PickupMessage "The Bone is in hand."
	States
	{
		Spawn:
			BONE A -1
			loop
	}
}

Actor Scroll : CustomInventory
{
	+INVENTORY.INVBAR
	Inventory.MaxAmount 1
	Inventory.Icon ARTIHRAD
	Inventory.PickupMessage "The Scroll is in hand."
	States
	{
		Spawn:
			HRAD ABCDEFGHIJKLMNOP 4
			loop
	}
}

Actor Scroll1 : Scroll 141
{
	+INVENTORY.KEEPDEPLETED
	Inventory.PickupMessage "Scroll 1 is in hand."
	States
	{
		Use:
			TNT1 A 1 ACS_ExecuteAlways(21)
			stop
	}
}

Actor Scroll2 : Scroll
{
	Inventory.PickupMessage "Scroll 2 is in hand."
	States
	{
		Use:
			TNT1 A 1 ACS_ExecuteAlways(19, 0, 1)
			stop
	}
}

Actor Scroll3 : Scroll
{
	Height 32
	Inventory.PickupMessage "Scroll 3 is in hand."
	States
	{
		Use:
			TNT1 A 1 ACS_ExecuteAlways(19, 0, 2)
			stop
	}
}

Actor Scroll4 : Scroll
{
	Height 32
	Inventory.PickupMessage "Scroll 4 is in hand."
	States
	{
		Use:
			TNT1 A 1 ACS_ExecuteAlways(19, 0, 3)
			stop
	}
}

Actor Mallet : CWeapMace 143
{
	Inventory.PickupMessage "The mallet is in hand."
	DamageType "Weapon"
	Weapon.SelectionOrder 102
	States
	{
		Spawn:
			MALL A -1
			stop
		Select:
			MALL B 1 A_Raise
			loop
		Deselect:
			MALL B 1 A_Lower
			loop
		Ready:
			MALL B 1 A_WeaponReady
			loop
		Fire:
			MALL C 2 Offset (60, 20)
			MALL C 1 Offset (30, 33)
			MALL C 2 Offset (8, 45)
			MALL D 1 Offset (8, 45)
			MALL E 1 Offset (8, 45)
			MALL F 1 Offset (8, 45)
			MALL F 1 Offset (-11, 58) A_CMaceAttack
			MALL G 1 Offset (8, 45)
			MALL G 2 Offset (-8, 74)
			MALL G 1 Offset (-20, 96)
			MALL G 8 Offset (-33, 160)
			MALL B 2 Offset (8, 75) A_ReFire
			MALL B 1 Offset (8, 65)
			MALL B 2 Offset (8, 60)
			MALL B 1 Offset (8, 55)
			MALL B 2 Offset (8, 50)
			MALL B 1 Offset (8, 45)
			Goto Ready
	}
}

Actor HaveGauntlets : Inventory
{
	Inventory.MaxAmount 1
}

Actor Gauntlets : CustomInventory 144
{
	+INVENTORY.INVBAR
	Inventory.MaxAmount 1
	Inventory.Icon GAUNTLET
	Inventory.PickupMessage "The Gauntlets are in hand."
	States
	{
		Spawn:
			GAUN A -1
			stop
		Use:
			TNT1 A 1 A_GiveInventory("HaveGauntlets",1)
			stop
	}
}

Actor Flute : CustomInventory 146
{
	+INVENTORY.KEEPDEPLETED
	+INVENTORY.INVBAR
	+NOGRAVITY
	Inventory.MaxAmount 1
	Inventory.Icon FLUTINV
	Inventory.PickupMessage "The Flute is in hand."
	States
	{
		Spawn:
			FLUT A -1
			stop
		Use:
			TNT1 A 1 ACS_ExecuteAlways(32,0,1)
			stop
	}
}

Actor Scepter : WhiteGem
{
	Inventory.Icon SCEPTINV
	Inventory.PickupMessage "The Scepter is in hand."
	States
	{
		Spawn:
			SCEP A -1
			stop
		Use:
			TNT1 A 1 ACS_ExecuteAlways(35, 0, 4)
			stop
	}
}

Actor Ring : WhiteGem
{
	Inventory.Icon RINGINV
	Inventory.PickupMessage "The Ring is in hand."
	States
	{
		Spawn:
			RING A -1
			stop
		Use:
			TNT1 A 1 ACS_ExecuteAlways(35, 0, 5)
			stop
	}
}

Actor LitTorch : Inventory
{
	Inventory.MaxAmount 1
}

Actor ThrowTorch : Inventory
{
	Inventory.MaxAmount 1
}

Actor Torch : Weapon 147
{
	DamageType "Torch"
	+NOGRAVITY
	Radius 8
	Height 64
	Inventory.PickupMessage "The Torch is in hand."
	Weapon.SelectionOrder 201
	States
	{
		Spawn:
			TORC A -1
			stop
		Select:
			TORC B 0 A_JumpIfInventory("LitTorch",1,2)
			TORC B 1 A_Raise
			loop
			TORC CCCCDDDDEEEEFFFFGGGGHHHHIIII 1 Bright A_Raise
			loop
		Deselect:
			TORC B 0 A_JumpIfInventory("LitTorch",1,2)
			TORC B 1 A_Lower
			loop
			TORC CCCCDDDDEEEEFFFFGGGGHHHHIIII 1 Bright A_Lower
			loop
		Ready:
			TORC B 0 A_JumpIfInventory("LitTorch",1,2)
			TORC B 1 A_WeaponReady
			loop
			TORC CCCCDDDDEEEEFFFFGGGGHHHHIIII 1 Bright A_WeaponReady
			loop
		Fire:			
			TORC B 0 A_JumpIfInventory("LitTorch",1,2)
			TORC B 1 A_WeaponReady
			Goto Ready
			TORC B 0 A_JumpIfInventory("ThrowTorch",1,2)
			TORC C 1 Bright ACS_ExecuteAlways(992)
			TORC B 0 A_JumpIfInventory("ThrowTorch",1,2)
			TORC C 1 Bright ACS_ExecuteAlways(992)
			TORC B 0 A_JumpIfInventory("ThrowTorch",1,2)
			TORC C 1 Bright ACS_ExecuteAlways(992)
			TORC B 0 A_JumpIfInventory("ThrowTorch",1,2)
			TORC C 1 Bright ACS_ExecuteAlways(992)
			TORC B 0 A_JumpIfInventory("ThrowTorch",1,2)
			TORC D 1 Bright ACS_ExecuteAlways(992)
			TORC B 0 A_JumpIfInventory("ThrowTorch",1,2)
			TORC D 1 Bright ACS_ExecuteAlways(992)
			TORC B 0 A_JumpIfInventory("ThrowTorch",1,2)
			TORC D 1 Bright ACS_ExecuteAlways(992)
			TORC B 0 A_JumpIfInventory("ThrowTorch",1,2)
			TORC D 1 Bright ACS_ExecuteAlways(992)
			TORC B 0 A_JumpIfInventory("ThrowTorch",1,2)
			TORC E 1 Bright ACS_ExecuteAlways(992)
			TORC B 0 A_JumpIfInventory("ThrowTorch",1,2)
			TORC E 1 Bright ACS_ExecuteAlways(992)
			TORC B 0 A_JumpIfInventory("ThrowTorch",1,2)
			TORC E 1 Bright ACS_ExecuteAlways(992)
			TORC B 0 A_JumpIfInventory("ThrowTorch",1,2)
			TORC E 1 Bright ACS_ExecuteAlways(992)
			TORC B 0 A_JumpIfInventory("ThrowTorch",1,2)
			TORC F 1 Bright ACS_ExecuteAlways(992)
			TORC B 0 A_JumpIfInventory("ThrowTorch",1,2)
			TORC F 1 Bright ACS_ExecuteAlways(992)
			TORC B 0 A_JumpIfInventory("ThrowTorch",1,2)
			TORC F 1 Bright ACS_ExecuteAlways(992)
			TORC B 0 A_JumpIfInventory("ThrowTorch",1,2)
			TORC F 1 Bright ACS_ExecuteAlways(992)
			TORC B 0 A_JumpIfInventory("ThrowTorch",1,2)
			TORC G 1 Bright ACS_ExecuteAlways(992)
			TORC B 0 A_JumpIfInventory("ThrowTorch",1,2)
			TORC G 1 Bright ACS_ExecuteAlways(992)
			TORC B 0 A_JumpIfInventory("ThrowTorch",1,2)
			TORC G 1 Bright ACS_ExecuteAlways(992)
			TORC B 0 A_JumpIfInventory("ThrowTorch",1,2)
			TORC G 1 Bright ACS_ExecuteAlways(992)
			TORC B 0 A_JumpIfInventory("ThrowTorch",1,2)
			TORC H 1 Bright ACS_ExecuteAlways(992)
			TORC B 0 A_JumpIfInventory("ThrowTorch",1,2)
			TORC H 1 Bright ACS_ExecuteAlways(992)
			TORC B 0 A_JumpIfInventory("ThrowTorch",1,2)
			TORC H 1 Bright ACS_ExecuteAlways(992)
			TORC B 0 A_JumpIfInventory("ThrowTorch",1,2)
			TORC H 1 Bright ACS_ExecuteAlways(992)
			TORC B 0 A_JumpIfInventory("ThrowTorch",1,2)
			TORC I 1 Bright ACS_ExecuteAlways(992)
			TORC B 0 A_JumpIfInventory("ThrowTorch",1,2)
			TORC I 1 Bright ACS_ExecuteAlways(992)
			TORC B 0 A_JumpIfInventory("ThrowTorch",1,2)
			TORC I 1 Bright ACS_ExecuteAlways(992)
			TORC B 0 A_JumpIfInventory("ThrowTorch",1,2)
			TORC I 1 Bright ACS_ExecuteAlways(992)
			Goto Ready
			TORC B 0
			Goto Fire2
		Fire2:
			TORC J 2 Bright Offset (68, 20) ACS_ExecuteAlways(37)
			TORC J 1 Bright Offset (38, 33)
			TORC J 2 Bright Offset (16, 45)
			TORC K 1 Bright Offset (16, 45)
			TORC K 1 Bright Offset (8, 55)
			TORC K 1 Bright Offset (0, 65) A_FireCustomMissile("TorchMissile")
			TORC L 1 Offset (0, 32)
			TORC L 1 Offset (0, 48)
			TORC L 1 Offset (0, 56)
			TORC L 1 Offset (0, 64)
			TORC L 1 Offset (0, 72) A_TakeInventory("Torch",1)
			Goto Ready
	}
}

Actor TorchMissile
{
	DamageType "Torch"
	Damage 100
	Speed 20
	Radius 8
	Height 16
	Projectile
	States
	{
		Spawn:
			TORC MNOP 3 Bright
			loop
		Death:
			TORX ABC 3 Bright
			TORX D 3 Bright ACS_ExecuteAlways(36)
			TORX EFGHIJ 3 Bright
			stop
	}	
}

Actor Cloak : CustomInventory 154
{
	+INVENTORY.INVBAR
	+NOGRAVITY
	Inventory.MaxAmount 1
	Inventory.Icon CLOAKINV
	Inventory.PickupMessage "The Cloak in hand."
	States
	{
		Spawn:
			CLOK A -1
			stop
		Use:
			TNT1 A 1 ACS_ExecuteAlways(38,0,150)
			TNT1 A 1 A_GiveInventory("HaveCloak",1)
			stop
	}
}

Actor HaveCloak : Inventory
{
	Inventory.MaxAmount 1
}
